<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>树下的老男孩</title>
  <subtitle>工匠之行，在行动中体悟修行的乐趣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-02-14T07:38:10.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>树下的老男孩</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>整洁代码</title>
    <link href="http://yoursite.com/2016/02/14/%E6%95%B4%E6%B4%81%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2016/02/14/整洁代码/</id>
    <published>2016-02-14T07:16:01.000Z</published>
    <updated>2016-02-14T07:38:10.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;为什么要写糟糕的代码？&quot;&gt;&lt;a href=&quot;#为什么要写糟糕的代码？&quot; class=&quot;headerlink&quot; title=&quot;为什么要写糟糕的代码？&quot;&gt;&lt;/a&gt;为什么要写糟糕的代码？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;赶时间完成任务 ，期望后面再清理.&lt;/li&gt;
&lt;li&gt;勒布朗法则：稍后等于永不（Later equals never）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;混乱的代价：&quot;&gt;&lt;a href=&quot;#混乱的代价：&quot; class=&quot;headerlink&quot; title=&quot;混乱的代价：&quot;&gt;&lt;/a&gt;混乱的代价：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;代码变的无法管理，团队生产力下降，&lt;/li&gt;
&lt;li&gt;增加人力？Brooks定律(人月神话)：向进度落后的项目中增加人手，只会使进度更加落后。&lt;/li&gt;
&lt;li&gt;破窗理论：假如原来的代码很优秀，新加入的代码会害怕破坏这美妙的整体而变的更好，反之则不会去在意。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;开始新设计&quot;&gt;&lt;a href=&quot;#开始新设计&quot; class=&quot;headerlink&quot; title=&quot;开始新设计:&quot;&gt;&lt;/a&gt;开始新设计:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;新系统设计与旧系统维护竞赛，时间可持续十年之久，完成时成员早不知去向&lt;/li&gt;
&lt;li&gt;花时间保持代码整洁不但关乎效率，还关乎生存&lt;/li&gt;
&lt;li&gt;制造混乱无助于赶上工期，只会拖累，唯一方法就是始终尽可能保持代码整洁&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;什么是整洁代码？&quot;&gt;&lt;a href=&quot;#什么是整洁代码？&quot; class=&quot;headerlink&quot; title=&quot;什么是整洁代码？&quot;&gt;&lt;/a&gt;什么是整洁代码？&lt;/h2&gt;&lt;h4 id=&quot;Bjarne-stroustrup：&quot;&gt;&lt;a href=&quot;#Bjarne-stroustrup：&quot; class=&quot;headerlink&quot; title=&quot;Bjarne stroustrup：&quot;&gt;&lt;/a&gt;Bjarne stroustrup：&lt;/h4&gt;&lt;p&gt;我喜欢优雅和高效的代码，代码逻辑应直截了当，叫缺陷难以隐藏；尽量减少依赖，使之便于维护；依据某种分成战略完善错误代码处理；性能调至最优，省的引诱别人做没规矩的优化，搞出一堆混乱来。整洁的代码只做好一件事。&lt;/p&gt;
&lt;h4 id=&quot;Michael-Feathers-修改代码的艺术作者-：&quot;&gt;&lt;a href=&quot;#Michael-Feathers-修改代码的艺术作者-：&quot; class=&quot;headerlink&quot; title=&quot;Michael Feathers(修改代码的艺术作者)：&quot;&gt;&lt;/a&gt;Michael Feathers(修改代码的艺术作者)：&lt;/h4&gt;&lt;p&gt;我可以列出我留意到的整洁代码的所有特点，但其中有一条是根本性的。整洁的代码总是看起来像是某位特别在意它的人写的，几乎没有什么改进的余地，代码作者什么都想到了，如果你企图改进它，总会回到原点，赞叹某人留给你的代码———全心头人的某人留下的代码。&lt;/p&gt;
&lt;h4 id=&quot;Ron（c-极限编程探险作者）&quot;&gt;&lt;a href=&quot;#Ron（c-极限编程探险作者）&quot; class=&quot;headerlink&quot; title=&quot;Ron（c#极限编程探险作者）:&quot;&gt;&lt;/a&gt;Ron（c#极限编程探险作者）:&lt;/h4&gt;&lt;p&gt;不要重复的代码（表示某种想法未在代码中得到良好的体现），只做一件事，提早构建简单抽象（在集合中查找某物）&lt;/p&gt;
&lt;h4 id=&quot;美国童子军军规：让营地比你来时更干净。&quot;&gt;&lt;a href=&quot;#美国童子军军规：让营地比你来时更干净。&quot; class=&quot;headerlink&quot; title=&quot;美国童子军军规：让营地比你来时更干净。&quot;&gt;&lt;/a&gt;美国童子军军规：让营地比你来时更干净。&lt;/h4&gt;&lt;p&gt;改好一个变量名，拆分一个过长的函数，消除一点点重复代码&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要写糟糕的代码？&quot;&gt;&lt;a href=&quot;#为什么要写糟糕的代码？&quot; class=&quot;headerlink&quot; title=&quot;为什么要写糟糕的代码？&quot;&gt;&lt;/a&gt;为什么要写糟糕的代码？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;赶时间完成任务 ，期望后面再清理.&lt;/li&gt;
&lt;li&gt;勒
    
    </summary>
    
    
      <category term="代码整洁之道" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93/"/>
    
  </entry>
  
</feed>
